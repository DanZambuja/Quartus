// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/03/2017 13:00:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          V74x162
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module V74x162_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR_L;
reg [3:0] D;
reg ENP;
reg ENT;
reg LD_L;
// wires                                               
wire [3:0] Q;
wire RCO;

// assign statements (if any)                          
V74x162 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLR_L(CLR_L),
	.D(D),
	.ENP(ENP),
	.ENT(ENT),
	.LD_L(LD_L),
	.Q(Q),
	.RCO(RCO)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
initial
begin
	repeat(33)
	begin
		CLK = 1'b0;
		CLK = #15000 1'b1;
		# 15000;
	end
	CLK = 1'b0;
end 

// CLR_L
initial
begin
	CLR_L = 1'b1;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b0;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b0;
end 
// D[ 1 ]
initial
begin
	D[1] = 1'b0;
end 
// D[ 0 ]
initial
begin
	D[0] = 1'b0;
end 

// ENP
initial
begin
	ENP = 1'b1;
end 

// ENT
initial
begin
	ENT = 1'b1;
end 

// LD_L
initial
begin
	LD_L = 1'b1;
end 
endmodule

