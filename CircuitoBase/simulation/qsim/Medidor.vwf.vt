// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/06/2017 02:49:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          medidor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module medidor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg liga;
reg RESET;
reg sinal;
// wires                                               
wire [3:0] estado;
wire pronto;
wire [15:0] Q;
wire RCO;

// assign statements (if any)                          
medidor i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.estado(estado),
	.liga(liga),
	.pronto(pronto),
	.Q(Q),
	.RCO(RCO),
	.RESET(RESET),
	.sinal(sinal)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #500 1'b1;
	#500;
end 

// liga
initial
begin
	liga = 1'b0;
	liga = #20000 1'b1;
	liga = #590000 1'b0;
end 

// RESET
initial
begin
	RESET = 1'b1;
	RESET = #10000 1'b0;
end 

// sinal
initial
begin
	sinal = 1'b0;
	sinal = #170000 1'b1;
	sinal = #230000 1'b0;
end 
endmodule

