// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/07/2017 23:40:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          BCDTo32Bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BCDTo32Bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] bcd_in_0;
reg [3:0] bcd_in_10;
reg [3:0] bcd_in_100;
reg [3:0] bcd_in_1000;
reg [3:0] bcd_in_10000;
reg [3:0] bcd_in_100000;
reg [3:0] bcd_in_1000000;
reg [3:0] bcd_in_10000000;
// wires                                               
wire [27:0] bin_out;

// assign statements (if any)                          
BCDTo32Bit i1 (
// port map - connection between master ports and signals/registers   
	.bcd_in_0(bcd_in_0),
	.bcd_in_10(bcd_in_10),
	.bcd_in_100(bcd_in_100),
	.bcd_in_1000(bcd_in_1000),
	.bcd_in_10000(bcd_in_10000),
	.bcd_in_100000(bcd_in_100000),
	.bcd_in_1000000(bcd_in_1000000),
	.bcd_in_10000000(bcd_in_10000000),
	.bin_out(bin_out)
);
initial 
begin 
#1000000 $finish;
end 
// bcd_in_0[ 3 ]
initial
begin
	bcd_in_0[3] = 1'b1;
end 
// bcd_in_0[ 2 ]
initial
begin
	bcd_in_0[2] = 1'b0;
end 
// bcd_in_0[ 1 ]
initial
begin
	bcd_in_0[1] = 1'b0;
end 
// bcd_in_0[ 0 ]
initial
begin
	bcd_in_0[0] = 1'b1;
end 
// bcd_in_10[ 3 ]
initial
begin
	bcd_in_10[3] = 1'b0;
end 
// bcd_in_10[ 2 ]
initial
begin
	bcd_in_10[2] = 1'b0;
end 
// bcd_in_10[ 1 ]
initial
begin
	bcd_in_10[1] = 1'b0;
end 
// bcd_in_10[ 0 ]
initial
begin
	bcd_in_10[0] = 1'b0;
end 
// bcd_in_100[ 3 ]
initial
begin
	bcd_in_100[3] = 1'b0;
end 
// bcd_in_100[ 2 ]
initial
begin
	bcd_in_100[2] = 1'b0;
end 
// bcd_in_100[ 1 ]
initial
begin
	bcd_in_100[1] = 1'b0;
end 
// bcd_in_100[ 0 ]
initial
begin
	bcd_in_100[0] = 1'b0;
end 
// bcd_in_1000[ 3 ]
initial
begin
	bcd_in_1000[3] = 1'b0;
end 
// bcd_in_1000[ 2 ]
initial
begin
	bcd_in_1000[2] = 1'b0;
end 
// bcd_in_1000[ 1 ]
initial
begin
	bcd_in_1000[1] = 1'b0;
end 
// bcd_in_1000[ 0 ]
initial
begin
	bcd_in_1000[0] = 1'b0;
end 
// bcd_in_10000[ 3 ]
initial
begin
	bcd_in_10000[3] = 1'b0;
end 
// bcd_in_10000[ 2 ]
initial
begin
	bcd_in_10000[2] = 1'b0;
end 
// bcd_in_10000[ 1 ]
initial
begin
	bcd_in_10000[1] = 1'b0;
end 
// bcd_in_10000[ 0 ]
initial
begin
	bcd_in_10000[0] = 1'b0;
end 
// bcd_in_100000[ 3 ]
initial
begin
	bcd_in_100000[3] = 1'b0;
end 
// bcd_in_100000[ 2 ]
initial
begin
	bcd_in_100000[2] = 1'b0;
end 
// bcd_in_100000[ 1 ]
initial
begin
	bcd_in_100000[1] = 1'b0;
end 
// bcd_in_100000[ 0 ]
initial
begin
	bcd_in_100000[0] = 1'b0;
end 
// bcd_in_1000000[ 3 ]
initial
begin
	bcd_in_1000000[3] = 1'b0;
end 
// bcd_in_1000000[ 2 ]
initial
begin
	bcd_in_1000000[2] = 1'b0;
end 
// bcd_in_1000000[ 1 ]
initial
begin
	bcd_in_1000000[1] = 1'b0;
end 
// bcd_in_1000000[ 0 ]
initial
begin
	bcd_in_1000000[0] = 1'b0;
end 
// bcd_in_10000000[ 3 ]
initial
begin
	bcd_in_10000000[3] = 1'b1;
end 
// bcd_in_10000000[ 2 ]
initial
begin
	bcd_in_10000000[2] = 1'b0;
end 
// bcd_in_10000000[ 1 ]
initial
begin
	bcd_in_10000000[1] = 1'b0;
end 
// bcd_in_10000000[ 0 ]
initial
begin
	bcd_in_10000000[0] = 1'b1;
end 
endmodule

